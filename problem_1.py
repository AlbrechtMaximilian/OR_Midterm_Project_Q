# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mV8Xg4cceJB7c8P1E7Ks1IdZG9uCrn4e
"""

# ▸▸ 1. 參數 ----------------------------------------------------------
FILE = 'OR113-2_midtermProject_data.xlsx'   # 確定檔名
T     = {1:1, 2:2, 3:3}                     # lead time (月)
CF    = {1:100, 2:80, 3:50}                 # 固定啟運費
CC, VC = 2750, 30.0                         # 海運櫃費、容量

# ▸▸ 2. 讀 Excel & 整理 ----------------------------------------------
import pandas as pd, re, gurobipy as gp
from gurobipy import GRB

xl = pd.ExcelFile(FILE)

# ---- Demand（兩列標題 → 一列） ----
dem_raw = xl.parse('Demand', header=None)
month_cols = list(dem_raw.iloc[1, 2:8])            # ['March', …, 'August']
dem_raw.columns = list(dem_raw.iloc[0, :2]) + month_cols
dem = (dem_raw
       .drop(index=[0, 1])                         # 刪前兩列
       .dropna(subset=['Product'])                 # 防空列
       .astype({'Product': int, 'Initial inventory': float})
       .reset_index(drop=True))

# ---- In‑transit（兩列標題 → 一列） ----
it_raw = xl.parse('In-transit', header=None)
it_months = list(it_raw.iloc[1, 1:3])               # ['End of March', 'End of April']
it_raw.columns = ['Product'] + it_months
it = (it_raw
      .drop(index=[0, 1])
      .dropna(subset=['Product'])
      .astype(int)
      .reset_index(drop=True))

# ---- Inventory cost & Shipping cost（單列標題） ----
inv = xl.parse('Inventory cost')
ship = xl.parse('Shipping cost')

# ▸▸ 3. 把 DataFrame 轉成模型係數 ---------------------------
months      = range(1, 7)                           # 1~6 代表 Mar–Aug
month_names = dict(zip(months, ['March','April','May','June','July','August']))
items       = dem['Product'].tolist()

# 需求 D[(item, t)]
D = {(r.Product, t): float(r[month_names[t]]) for _, r in dem.iterrows() for t in months}
# 期初庫存
I0 = dem.set_index('Product')['Initial inventory'].to_dict()
# 在途庫存：End of March → t=1，End of April → t=2
Itrans = {(r.Product, 1): float(r['End of March'])  for _, r in it.iterrows()}
Itrans.update({(r.Product, 2): float(r['End of April']) for _, r in it.iterrows()})
# 產品成本
CP  = inv.set_index('Product')['Purchasing cost'].to_dict()
CH  = inv.set_index('Product')['Holding cost'].to_dict()
sales = inv.set_index('Product')['Sales price'].to_dict()
CLS = {p: sales[p] - CP[p] for p in items}          # 遺失銷售成本

# 運費 & 體積
CV, V = {}, {}
for _, r in ship.iterrows():
    p = int(r.Product)
    CV[(p, 1)] = float(r['Express delivery'])
    CV[(p, 2)] = float(r['Air freight'])
    CV[(p, 3)] = 0.0                               # 海運變動費=0（已算在櫃費）
    V[p] = float(r['Cubic meter'])

# ▸▸ 4. 建立 Gurobi 模型 -----------------------------------
m = gp.Model('OrderingPlan')
x  = m.addVars(items, T.keys(), months, lb=0, name='x')         # 訂貨量
y  = m.addVars(T.keys(), months, vtype=GRB.BINARY, name='y')    # 啟運
v  = m.addVars(items, months, lb=0, name='v')                   # 庫存
ls = m.addVars(items, months, lb=0, name='ls')                  # lost sales
z  = m.addVars(months, vtype=GRB.INTEGER, lb=0, name='z')       # 櫃數

# --- 庫存平衡 ---
for p in items:
    for t in months:
        arrivals = gp.quicksum(x[p, j, t - T[j] + 1]
                               for j in T if t - T[j] + 1 >= 1)
        prev = I0[p] if t == 1 else v[p, t-1]
        m.addConstr(prev + Itrans.get((p, t), 0) + arrivals
                    - D[(p, t)] == v[p, t] - ls[p, t],
                    name=f'bal_{p}_{t}')

# --- Big‑M 連結啟運固定費 ---
for j in T:
    for t in months:
        rem = sum(D[(p, τ)] for p in items for τ in range(t + T[j] - 1, 7))
        m.addConstr(gp.quicksum(x[p, j, t] for p in items) <= rem * y[j, t],
                    name=f'bigM_{j}_{t}')

# --- 海運櫃容量 ---
for t in months:
    m.addConstr(gp.quicksum(V[p] * x[p, 3, t] for p in items) <= VC * z[t],
                name=f'cap_{t}')

# --- 目標：成本最小化 ---
cost = (
    gp.quicksum(CH[p] * v[p, t]                 for p in items for t in months) +
    gp.quicksum((CP[p] + CV[(p, j)]) * x[p, j, t]
                for p in items for j in T for t in months) +
    gp.quicksum(CF[j] * y[j, t]                for j in T for t in months) +
    gp.quicksum(CC * z[t]                      for t in months) +
    gp.quicksum(CLS[p] * ls[p, t]              for p in items for t in months)
)
m.setObjective(cost, GRB.MINIMIZE)

# ▸▸ 5. 求解 -------------------------------------------------
m.Params.OutputFlag = 1          # 顯示 Gurobi 日誌
m.optimize()

# ▸▸ 6. 匯出結果 --------------------------------------------
import pandas as pd
plan = [[month_names[t], {1:'Express',2:'Air',3:'Sea'}[j], p, round(x[p,j,t].X,2)]
        for p in items for j in T for t in months if x[p,j,t].X > 1e-6]
plan_df = pd.DataFrame(plan, columns=['Month','Mode','Product','Quantity'])
plan_df.to_csv('OptimalPlan.csv', index=False)

cost_df = pd.DataFrame(
    [['Holding',   sum(CH[p]*v[p,t].X           for p in items for t in months)],
     ['Purchasing',sum(CP[p]*x[p,j,t].X         for p in items for j in T for t in months)],
     ['Var ship',  sum(CV[(p,j)]*x[p,j,t].X     for p in items for j in T for t in months)],
     ['Fixed ship',sum(CF[j]*y[j,t].X           for j in T for t in months)],
     ['Container', sum(CC*z[t].X                for t in months)],
     ['Lost sales',sum(CLS[p]*ls[p,t].X         for p in items for t in months)],
     ['TOTAL',     m.ObjVal]],
    columns=['Cost component','Amount'])
cost_df.to_csv('CostBreakdown.csv', index=False)

print('\n✔ OptimalPlan.csv 與 CostBreakdown.csv 已輸出完成')